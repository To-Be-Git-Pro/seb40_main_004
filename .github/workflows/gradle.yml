# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches:
      - 'main'

env:
  S3_BUCKET_NAME: morakmorak
  RESOURCE_PATH: ./server/morak_back_end/src/main/resources/application.yml
  CODE_DEPLOY_APPLICATION_NAME: morak
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: morak-group

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      working-directory: ./server/morak_back_end
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
       # [1] application.yml 생성
    - name: Set yaml file 
      uses: microsoft/variable-substitution@v1
      with:
        files: ${{ env.RESOURCE_PATH }} 
      env:
        spring.datasource.url: ${{ secrets.RDS_URL }}
        spring.datasource.username: ${{ secrets.RDS_ID }}
        spring.datasource.password: ${{ secrets.RDS_PASSWORD }}
        spring.redis.host: ${{ secrets.REDIS_URL }}
        spring.redis.port: ${{ secrets.REDIS_PORT }}
        spring.mail.host: ${{ secrets.MAIL_HOST }}
        spring.mail.port: ${{ secrets.MAIL_PORT }}
        spring.mail.username: ${{ secrets.MAIL_ID }}
        spring.mail.password: ${{ secrets.MAIL_PASSWORD }}
        spring.security.oauth2.client.registration.github.client-id: aaaasadsadsadsad
        spring.security.oauth2.client.registration.github.password: saadsadasdsadsadsa
        spring.security.oauth2.client.registration.google.client-id: sadasdasdsadasddasdas
        spring.security.oauth2.client.registration.google.password: sadsadsadsadsadsadsadsa
        jwt.secretKey: ${{ secrets.SECURITY_SECRET_KEY }}
        jwt.refreshKey: ${{ secrets.SECURITY_REFRESH_KEY }}
        cloud.aws.credentials.accessKey: ${{ secrets.AWS_ACCESS_KEY }}
        cloud.aws.credentials.secretKey: ${{ secrets.AWS_SECRET_KEY }}
        cloud.aws.s3.bucket: ${{ secrets.AWS_IMAGE_BUCKET_NAME }}
        
            
    - name: Setup Gradle 
      uses: gradle/gradle-build-action@v2

      
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
        
        
    - name: make gradlew 
      run: chmod +x ./gradlew
      working-directory: ${{ env.working-directory }}
    - name: Build with Gradle
      run: ./gradlew build
      working-directory: ${{ env.working-directory }}
      # [3] save build
    - name: Make zip file
      run: zip -r ./$GITHUB_SHA.zip .
      shell: bash

        # [4] aws 권한
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ap-northeast-2

        # [5] upload
    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip

        # [6] deploy
    - name: Code Deploy
      run: | 
        aws deploy create-deployment \
        --deployment-config-name CodeDeployDefault.AllAtOnce \
        --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
        --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
        --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$GITHUB_SHA.zip
   
